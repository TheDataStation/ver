from dindex_store.common import EdgeType
from dindex_store.profile_index_duckdb import ProfileIndexDuckDB
from dindex_store.graph_index_duckdb import GraphIndexDuckDB
from dindex_store.graph_index_kuzu import GraphIndexKuzu
from dindex_store.fulltext_index_duckdb import FTSIndexDuckDB
# from dindex_store.graph_index_arangodb import GraphIndexArangoDB
from typing import Dict, List


class DiscoveryIndex:
    """DiscoveryIndex stores profiles generated by the profiler, a graph that
    describes relationships between profiles, and a full text search index on
    the original input data.

    :param profile_index: ProfileIndex
    :param graph_idnex: GraphIndex
    :param fts_index: FullTextSearchIndex
    """

    profile_index_mapping = {
        "duckdb": ProfileIndexDuckDB,
    }

    graph_index_mapping = {
        "duckdb": GraphIndexDuckDB,
        "kuzu": GraphIndexKuzu,
        # "arangodb": GraphIndexArangoDB,
    }

    fts_index_mapping = {
        "duckdb": FTSIndexDuckDB,
    }

    def __init__(self, config: Dict) -> None:
        # TODO: Validate config in a consistent way
        self.__profile_index = DiscoveryIndex.profile_index_mapping[config["profile_index"]](
            config)
        self.__graph_index = DiscoveryIndex.graph_index_mapping[config["graph_index"]](
            config)
        self.__fts_index = DiscoveryIndex.fts_index_mapping[config["fts_index"]](
            config)

    # ----------------------------------------------------------------------
    # Modify Methods

    def add_profile(self, node: Dict) -> bool:
        node_id = node["id"]
        if not self.__profile_index.add_profile(node):
            return False
        return self.__graph_index.add_node(node_id)

    def add_edge(
            self,
            source_node_id: int,
            target_node_id: int,
            type: EdgeType,
            properties: Dict) -> bool:
        return self.__graph_index.add_edge(
            source_node_id, target_node_id, type, properties)

    def add_undirected_edge(
            self,
            source_node_id: int,
            target_node_id: int,
            type: EdgeType,
            properties: Dict) -> bool:
        return self.__graph_index.add_undirected_edge(
            source_node_id, target_node_id, type, properties)

    def create_fts_index(self, table_name, index_column):
        return self.__fts_index.create_fts_index(table_name, index_column)

    # ----------------------------------------------------------------------
    # Query Methods

    def get_profile(self, node_id: int) -> Dict:
        return self.__profile_index.get_node(node_id)

    def get_minhashes(self) -> Dict:
        return self.__profile_index.get_minhashes()

    def find_neighborhood(self, node_id: int, hops: int = 1):
        return self.__graph_index.find_neighborhood(node_id, hops)

    def find_path(
            self,
            source_node_id: int,
            target_node_id: int,
            max_len: int = 3):
        return self.__graph_index.find_path(
            source_node_id, target_node_id, max_len)

    def fts_query(self, keyword) -> List:
        return self.__fts_index.fts_query(keyword)
